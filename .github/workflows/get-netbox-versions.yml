name: Get supported NetBox versions

on:
  workflow_call:
    outputs:
      latest_version:
        description: "The most recent NetBox tag within the supported version range of the plugin."
        value: ${{ jobs.get-netbox-versions.outputs.latest_version }}
      supported_versions:
        description: "All the patch versions of the highest supported minor version, and the latest patch of all subsequently supported minors."
        value: ${{ jobs.get-netbox-versions.outputs.supported_versions }}
  workflow_dispatch:

permissions:
  contents: read

jobs:
  get-netbox-versions:
    name: Get the NetBox versions supported by the plugin
    runs-on: "ubuntu-latest"

    outputs:
      latest_version: ${{ steps.netbox-versions.outputs.latest_version }}
      supported_versions: ${{ steps.netbox-versions.outputs.supported_versions }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: netbox-data-flows

      - name: Checkout latest NetBox release
        uses: actions/checkout@v4
        with:
          repository: "netbox-community/netbox"
          path: netbox
          ref: main
          fetch-depth: 0

      - id: netbox-versions
        name: Extract supported NetBox versions
        shell: bash
        run: |
          MIN_VERSION=v$(grep -F "min_version =" netbox-data-flows/netbox_data_flows/__init__.py | cut -d\" -f2)
          MAX_VERSION=v$(grep -F "max_version =" netbox-data-flows/netbox_data_flows/__init__.py | cut -d\" -f2)

          echo "[*] Found supported versions: ${MIN_VERSION} - ${MAX_VERSION}"

          cd ./netbox

          # join_by "', '"" a b c => a', 'b', 'c"
          function join_by {
            local d=${1-} f=${2-}
            if shift 2; then
              printf %s "$f" "${@/#/$d}"
            fi
          }

          # get vMajor.Minor from vMajor.Minor.Patch
          function get_minor() {
            local version=${1}

            echo "$version" | cut -d. -f1-2
          }

          # return true if both versions are the same minor level
          function same_minor {
            local v1=${1} v2=${2}

            [ $(get_minor "$v1") == $(get_minor "$v2") ]
          }

          # check if a version is within [MIN_VERSION:MAX_VERSION]
          function supported_range() {
            local version=${1}

            if [ "$version" == "$MIN_VERSION" ] || [ "$version" == "$MAX_VERSION" ]; then
              return 0
            fi

            greater=$(echo -e "${version}\n${MAX_VERSION}" | sort -Vr | head -n 1)
            smaller=$(echo -e "${version}\n${MIN_VERSION}" | sort -V | head -n 1)

            if [ "$greater" == "$version" ]; then
              return 1
            fi

            if [ "$smaller" == "$version" ]; then
              return 2
            fi

            return 0
          }

          latest_version=""
          declare -a supported_versions=()
          loop_minor=""

          declare -a all_versions=($(git tag | \grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -Vr))
          echo "[*] NetBox has ${#all_versions[@]} tags, the highest is ${all_versions[0]}."

          for tag in "${all_versions[@]}"; do
            set +e
            supported_range "$tag"
            case $? in
              1) continue ;;
              2) break ;;
            esac
            set -e

            # get the highest version within the supported range
            if [ -z "$latest_version" ]; then
              latest_version="$tag"
              loop_minor="$tag"
              supported_versions+=("$tag")
              continue
            fi

            # get the highest patch of each supported minor
            if ! same_minor "$loop_minor" "$tag"; then
              loop_minor="$tag"
              supported_versions+=("$tag")
              continue
            fi
          done

          if [ -z "$latest_version" ]; then
            echo "No supported NetBox version within range ${MIN_VERSION} - ${MAX_VERSION}" >&1
            exit 1
          fi

          echo "[*] Identified ${#supported_versions[@]} versions to test. The highest is ${latest_version}."

          supported_versions_str='"'$(join_by '", "' ${supported_versions[@]})'"'

          echo 'latest_version="'${latest_version}'"' | tee -a "$GITHUB_OUTPUT"
          echo 'supported_versions=['${supported_versions_str}']' | tee -a "$GITHUB_OUTPUT"
