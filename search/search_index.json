{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#netbox-data-flows-plugin","title":"NetBox Data Flows Plugin","text":"<p>NetBox plugin to document Data Flows between devices and applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Document data flows between IP addresses, IP ranges and Prefixes documented in NetBox.</li> <li>Regroup the data flows into applications and hierarchical groups.</li> </ul> <p>Documenting your data flows can help you design the network architecture, automate your firewall rule definition or reviews, implement security contracts in a software-defined network, or respond to compliance requirements.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#data-flow","title":"Data Flow","text":"<p> A data flow for an application, here representing the user access to frontend servers and backend servers over TCP/443.</p> <p> Details of the data flow specifications, displaying all the IP addresses, IP ranges and Prefixes that are involved in that data flow.</p>"},{"location":"#application","title":"Application","text":"<p> The application allows you to group all the related data flows. Optionally, you can assign devices or other NetBox objects to an application, using a custom field.</p>"},{"location":"#device-tab-views","title":"Device tab views","text":"<p> The plugin adds Tab views to Devices, Virtual Machines, IP addresses, IP ranges and Prefixes to list all the data flows that involve them as a source or destination.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Read the Quick Start tutorial to discover how to use the plugin.</p>"},{"location":"#data-model","title":"Data model","text":"<p>The data model and design's decisions can be found in the documentation.</p>"},{"location":"#installation-and-configuration","title":"Installation and configuration","text":"<p>Instructions to install, configure, update or uninstall the plugin can be found in the plugin's documentation.</p>"},{"location":"#supported-versions","title":"Supported Versions","text":"netbox version netbox-data-flows version &gt;= 4.4.0 &gt;= v1.2.1 &gt;= 4.3.0 &gt;= v1.1.1 &gt;= 4.2.0 &gt;= v1.1.0, &lt; v1.4.0 &gt;= 4.1.0 &gt;= v1.0.4, &lt; v1.2.0 &gt;= 4.0.0 &gt;= v1.0.0, &lt; v1.2.0 &lt; 4.0.0 Not supported <p>Only the latest version of the plugin is officially supported. The test suite is run on the latest patch version of the current version of NetBox, and the previous one (if no breaking compatibility change).</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>NetBox</li> <li>Python 3.10 or higher</li> </ul>"},{"location":"#contributions","title":"Contributions","text":"<p>Contributions are welcomed. This plugin is developped on the free time of its author, so do not expect regular releases.</p> <p>Please report security vulnerabilities via GitHub security advisory. Do not create a public issue. See also the Security Policy.</p> <p>Please report bugs and feature requests in GitHub.</p> <p>GitHub Discussions are opened for general help requests and any other topics you may want to discuss.</p>"},{"location":"#known-bugs-and-limitations","title":"Known bugs and limitations","text":"<ul> <li>GraphQL API is not implemented</li> </ul> <p>See also the list of issues.</p>"},{"location":"data-model/","title":"Data Model","text":""},{"location":"data-model/#data-model-and-designs-decisions","title":"Data Model and Design's Decisions","text":"<p>If you want an example on how to use the plugin, head towards the quick start tutorial.</p>"},{"location":"data-model/#plugins-objectives","title":"Plugin's objectives","text":"<p>The goal of this plugin is to document the data flows of applications and systems, which should already be documented in your NetBox instance.</p> <p>It aims to:</p> <ul> <li>Document known TCP, UDP, ICMP or SCTP data flows</li> <li>Group them and link them to applications for better manageability</li> <li>Provide a useful source of truth to generate firewall or other filtering rules (network ACL, security contracts, etc.)</li> </ul> <p>It does not try to:</p> <ul> <li>Document the existing firewall or network filtering rules</li> <li>Provision firewall or filtering rules (still possible via scripts)</li> </ul>"},{"location":"data-model/#design-considerations","title":"Design considerations","text":"<p>The plugin tries to use the native NetBox objects when relevant. However, data flows are not directly between physical devices or virtual machines, instead they sit at a higher application level and are relatively agnostic of the physical world under them.</p> <p>Furthermore, a device may have several network interfaces, each with zero, one or several IP addresses. An application may be configured to use a specific IP address to sent a data flow from, or to listen on or it can use any available IP address and let the operating system figure which one is used.</p> <p>For some data flows, it does not make sense to specify single IP addresses as source or as destination. For example, all the devices in a network segment may want to connect to the same DNS or LDAP servers. Or a monitoring server may scan entire network ranges.</p> <p>As such, it was decided to use NetBox's IP Address, IP Range and IP Prefix objects as the sources and destinations of data flows:</p> <ul> <li>If the source is a single IP of a single device, you can use the IP Address assigned to that device.</li> <li>If the source is any IP of a device, you can list all the IP addresses assigned to that device.</li> <li>If the destination is a whole Prefix or IP Range, you can use that object.</li> <li>If the destination is a specific set of IP Addresses, you can list them explicitely.</li> </ul> <p>It was decided not to use the native Service object:</p> <ul> <li>The Service represents a TCP, SCTP or UDP listener and does not work as a possible Source for the data flow</li> <li>It does not support other protocols, such as ICMP</li> <li>It is easy to combine a list of IP, prefixes and ranges, but combining them with a service (i.e.: a IP/protocol/port association) is much more complicated</li> <li>Trying to bypass these limitations led to a technical implementation that was too complex and error-prone.</li> </ul> <p>To ease maintenance, the IP Addresses, IP Ranges and Prefixes are grouped in Object Aliases. These can be seen as reusable groups of addresses that can be a source or a destination to one or several data flows.</p>"},{"location":"data-model/#data-model","title":"Data Model","text":"<p>The following sections explain the different objects created by the plugin.</p> <p></p>"},{"location":"data-model/#application-and-application-role","title":"Application and Application Role","text":"<p>Applications are logical grouping of data flows and can be business applications or infrastructure.</p> <p>Examples of applications:</p> <ul> <li>Active Directory</li> <li>MySuperBusinessApp</li> <li>Network management</li> <li>...</li> </ul> <p>You can optionally use a custom field to assign your devices and other object to specific applications. See the Options section of the configuration guide</p> <p>Application Role is a label to help you categorize your applications. Each Application may have one Application Role.</p> <p>Examples of roles:</p> <ul> <li>Infrastructure</li> <li>Business Division 1</li> <li>...</li> </ul>"},{"location":"data-model/#data-flow","title":"Data Flow","text":"<p>Data Flows modelize a network connection between two objects. They may be assigned to an Application.</p> <p>Data Flows should have a source, a destination, a protocol, source ports and destination ports. Only the protocol is mandatory.</p> <p>By convention, if the list of source ports or destination ports is empty, this means \"Any\" port is accepted (for transport protocols with ports). The interface will display <code>Any</code>. API and exports will return an empty list.</p> <p>Data Flow Groups form a forest of groups. They can also be assigned to an Application. Data Flow Groups can be enabled and disabled and inherit the status of their parent. Disabled Data Flow Groups disable all the Data Flows contained within.</p> <p>Only in the REST API, the inherited list of tags is available (inherited_tags when reading and inherited_tag when filtering). This is the set of tags of the data flow and its parent groups. This field is not displyed in the UI.</p>"},{"location":"data-model/#object-alias","title":"Object Alias","text":"<p>Object Aliases are a group of references to other NetBox objects. Object Aliases are used as sources and destinations of Data Flows and corresponds to the groups or aliases used in firewall configuration.</p> <p>Object Aliases can contain any number of:</p> <ul> <li>IP Addresses (<code>ipam.ipaddress</code>)</li> <li>IP Ranges (<code>ipam.iprange</code>)</li> <li>Prefixes (<code>ipam.prefix</code>)</li> </ul> <p>There is no defined meaning for an empty object alias, but it can be used when: * The aliased object is not documented in NetBox (e.g.: third party public IP addresses) * The alias is \"Any\" / \"Internet\" destination</p>"},{"location":"installation-configuration/","title":"Installation and Configuration","text":""},{"location":"installation-configuration/#installation-and-configuration","title":"Installation and Configuration","text":""},{"location":"installation-configuration/#how-to-install","title":"How to install","text":"<p>NetBox Data Flows is a NetBox plugin.</p> <p>Once installed, go to the quick start guide to discover how to use the plugin.</p>"},{"location":"installation-configuration/#supported-versions","title":"Supported Versions","text":"netbox version netbox-data-flows version &gt;= 4.4.0 &gt;= v1.2.1 &gt;= 4.3.0 &gt;= v1.1.1 &gt;= 4.2.0 &gt;= v1.1.0, &lt; v1.4.0 &gt;= 4.1.0 &gt;= v1.0.4, &lt; v1.2.0 &gt;= 4.0.0 &gt;= v0.9.0, &lt; v1.2.0 &gt;= 3.7.0 &gt;= v0.8.0, &lt; v0.9.0 &gt;= 3.6.0 &gt;= v0.7.3, &lt; v0.8.0 &lt; 3.6.0 Not supported <p>Only the latest version of the plugin is officially supported. The test suite is run on the latest patch version of the current version of NetBox, and the previous minor one (if no breaking compatibility change).</p> <p>Warning</p> <p>The plugin uses some classes that are not explicitely exported in NetBox's plugin API, such as MPTT Tree-based models. Upward compatiblity is therefore not fully guaranteed.</p>"},{"location":"installation-configuration/#dependencies","title":"Dependencies","text":"<ul> <li>NetBox</li> <li>Python 3.10 or higher</li> </ul>"},{"location":"installation-configuration/#installation","title":"Installation","text":"<p>Note</p> <p>For adding to a NetBox Docker setup see the general instructions for using netbox-docker with plugins.</p> <p>The plugin is available at PyPi.</p> <p>Add the Python package to your <code>local_requirements</code> file: <pre><code>echo netbox-data-flows &gt;&gt; /opt/netbox/local_requirements.txt\n</code></pre></p> <p>Enable the plugin in NetBox configuration: <pre><code># Add in: /opt/netbox/netbox/netbox/configuration.py\n\nPLUGINS = [\n  'netbox_data_flows',\n]\n</code></pre></p> <p>Run NetBox's <code>upgrade.sh</code> script to download the plugin and run the migrations: <pre><code>/opt/netbox/upgrade.sh\n</code></pre></p> <p>Full reference: Using Plugins - NetBox Documentation.</p>"},{"location":"installation-configuration/#upgrade","title":"Upgrade","text":"<p>The latest version from PyPi is always installed when <code>upgrade.sh</code> is run again, thus the plugin will be updated when you update your NetBox instance.</p> <p>You can manually update the plugin without upgrading NetBox with: <pre><code># Enter NetBox venv\n. /opt/netbox/venv/bin/activate\n\n# Update the plugin\npip install --upgrade netbox-data-flows\n\n# Run the migrations\n/opt/netbox/netbox/manage.py migrate netbox_data_flows\n\n# Restart the NetBox server\nsystemctl restart netbox.service netbox-rq.service\n</code></pre></p>"},{"location":"installation-configuration/#uninstallation","title":"Uninstallation","text":"<p>Disable the plugin in NetBox configuration: remove <code>netbox_data_flows</code> from <code>PLUGINS</code>.</p> <p>Remove <code>netbox-data-flows</code> from your <code>local_requirements</code> file. You can run <code>upgrade.sh</code> or enter the venv and use <code>pip</code> to uninstall <code>netbox-data-flows</code>.</p> <p>Deleting the data of the plugin is not recommended. If you really want to do it:</p> <ul> <li>Enable the venv and launch NetBox's dbshell</li> <li>Drop all the <code>netbox_data_flows_*</code> tables, e.g.:   <code>DROP TABLE netbox_data_flows_applicationrole CASCADE</code>)</li> <li>Delete the migrations of the plugin:   <code>DELETE FROM \"django_migrations\" where \"app\" = 'netbox_data_flows';</code></li> </ul>"},{"location":"installation-configuration/#configuration","title":"Configuration","text":"<p>The plugin can be configured in NetBox's <code>configuration.py</code> file.</p>"},{"location":"installation-configuration/#options","title":"Options","text":"<p>You can configure the plugin by changing <code>PLUGIN_CONFIG</code>:</p> <pre><code># Add in: /opt/netbox/netbox/netbox/configuration.py\n\nPLUGINS_CONFIG = {\n    'netbox_data_flows': {\n        # Create a menu section for the plugin\n        'top_level_menu': True,\n        # Use a Custom Field to identify objects linked to an application\n        'application_custom_field': \"application\",\n    }\n}\n</code></pre> <p>Supported options:</p> <ul> <li><code>top_level_menu</code>: if set to <code>True</code> (default), the plugin will create its own menu section in the left navigation panel. If set to <code>False</code>, the plugin will be in a subsection under the <code>Plugins</code> section.</li> <li><code>application_custom_field</code> (disabled by default): when set to the name of a custom field, will display a list of related objects in the application page. The custom field must exist, be of type Object or Multiple Object and be related to <code>Data Flows &gt; Application</code>.</li> </ul> <p></p>"},{"location":"installation-configuration/#nomenclature","title":"Nomenclature","text":"<p>The name of Data Flows, Data Flow Groups and Object Aliases is not constrained. You may wish to enforce your own validation rules in your configuration, e.g.:</p> <pre><code># Add in: /opt/netbox/netbox/netbox/configuration.py\n\nCUSTOM_VALIDATORS = {\n    \"netbox_data_flows.objectalias\": [\n        {\n            \"name\": {\n                \"regex\": \"(host|net)_[a-z_]+\"\n            },\n        }\n    ]\n}\n</code></pre> <p>Similar settings can be applied to:</p> <ul> <li>Applications: <code>netbox_data_flows.application</code></li> <li>Application Roles: <code>netbox_data_flows.applicationrole</code></li> <li>Data Flows: <code>netbox_data_flows.dataflow</code></li> <li>Data Flow Groups: <code>netbox_data_flows.dataflowgroup</code></li> <li>Object Aliases: <code>netbox_data_flows.objectalias</code></li> </ul> <p>Full reference: CUSTOM_VALIDATORS - NetBox Documentation</p>"},{"location":"installation-configuration/#protocol-choices","title":"Protocol Choices","text":"<p>You can edit the list of available protocols when creating a data flow.</p> <pre><code># Add in: /opt/netbox/netbox/netbox/configuration.py\n\nFIELD_CHOICES = {\n    'netbox_data_flows.DataFlow.protocol+': (\n        ('igmp', \"IGMP\"),\n    )\n}\n</code></pre> <p>This syntax will add IGMP as a possible protocol in the drop list.</p> <p>You can also extend the list of:</p> <ul> <li>ICMPv4 types: <code>netbox_data_flows.DataFlow.icmpv4types+</code></li> <li>ICMPv6 types: <code>netbox_data_flows.DataFlow.icmpv6types+</code></li> </ul> <p>Full reference: FIELD_CHOICES - NetBox Documentation</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#quick-start","title":"Quick Start","text":"<p>This tutorial should let you discover how to use the plugin.</p> <p>If you have not installed it yet, you should go to the installation and configuration page first.</p> <p>If you want a more general explanation of the models used by the plugin, head to the data model page.</p>"},{"location":"quick-start/#scenario","title":"Scenario","text":"<p>In this tutorial, we want to document the data flows of two applications:</p> <ul> <li>Acme Inc, a business application composed of a frontend, a backend and a database.</li> <li>Zabbix, a support application that monitors our servers, our routers and our Acme Inc application.</li> </ul> <p>Here is what the dataflows of the Acme Inc. application look like.</p> <p></p>"},{"location":"quick-start/#basic-example","title":"Basic example","text":"<p>Let's start by documenting the two data flow below:</p> <ul> <li>The 3 frontend servers of Acme talk with the API exposed on the backend server</li> <li>Both the frontend servers and the backend servers communicate with the database server.</li> </ul> <p>There are two mandatory objects to do that: the Object Aliases and the Data Flows.</p>"},{"location":"quick-start/#object-aliases","title":"Object Aliases","text":"<p>First, go the bottom of the NetBox navigation menu to find the Data Flow plugin, and select Object Aliases under the Data Flows section, and click on \"Add\" to create a new alias.</p> <p></p> <p>Think of an Object Alias as a reusable group of IP addresses, ranges or prefixes that we can use as source and/or destination in many data flows. You can have more information in the data model.</p> <p>Our Object Aliases can contain any number of the following native NetBox objects:</p> <ul> <li>An IP Address (and implicitly the device, virtual machine or network interface associated to it)</li> <li>An IP Range</li> <li>A Prefix</li> </ul> <p>Note</p> <p>The reason why it is not possible to use a Service object is because they represent a TCP/UDP/SCTP listener. Using them as a source for the data flow does not make sense, and because they are limited to these three protocols. There are also technical limitations as explained in the data model.</p> <p>Let's create three Object Aliases:</p> Name Description acme_frontend Frontend webservers for Acme acme_backend Backend servers for Acme acme_database Database servers for Acme <p>When you create or edit an object alias, you can link any IP Address, IP Range or Prefix. Zou can use the filter functions to search which addresses need to be added.</p> <p></p> <p>Once created, your alias will look like that:</p> <p></p> <p>Let's repeat the same process for 'acme_backend' and 'acme_database'.</p> <p></p> <p>Tip</p> <p>You can leave the object alias empty if what is represents is not documented in your NetBox instance. For example, an alias named \"Internet\" could be used to represent any external IP address for data flows ingressing or egressing your network.</p>"},{"location":"quick-start/#data-flows","title":"Data Flows","text":"<p>Now that we have object aliases, we can create data flows. In the NetBox navigation menu, select Data Flows under the Data Flows section, and click on \"Add\" to create a new data flow.</p> <p>For the plugin, a data flow is a network connection between some sources and some destinations (another set of object aliases), using a specific protocol:</p> <ul> <li>The sources are zero, one or more object aliases</li> <li>The destinations are also zero, one or more (potentially different) object aliases</li> <li>The protocol can be Any/ICMP/TCP/UDP/TCP+UDP/SCTP</li> <li>There can be a list of source and destination ports (by default, any port)</li> <li>The data flow can be marked as enabled or disabled.</li> </ul> <p>Note</p> <p>The data flow can have an optional application and data flow group, which are explained later in the tutorial.</p> <p>Tip</p> <p>By convention, if zero object aliases are specified as source (or as destination), this is interpreted (and displayed) as \"Any\". Similarly, if no source or destination ports are defined, this is interpreted as \"Any\".</p> <p>Tip</p> <p>You can change the list of available protocols in the configuration. Check the Protocol Choices section in the configuration documenation for details.</p> <p>In our example, the frontend servers communicates with the API exposed on port TCP 8443 of the backend servers. We don't need to specify a source port (interpreted as Any port).</p> <p></p> <p>Similarly, for the communications with the database servers, but here we have two sources.</p> <p></p>"},{"location":"quick-start/#complete-example","title":"Complete example","text":"<p>Now that we have created two data flows, let's go back and make containers for them before creating the rest.</p> <p>The plugin uses Applications and Application Roles to group data flows based on their purposes. Both models are optional, but recommended.</p>"},{"location":"quick-start/#application-roles","title":"Application Roles","text":"<p>Go to the bottom of the NetBox navigation menu to find the Data Flow plugin, and select Application Roles under the Applications section.</p> <p>Here, you can create two Application Roles, which represent the category of applications, such as business or support, critical or not, external facing, etc., depending on your needs. In our example:</p> Name Business applications Support applications <p>Application Roles have:</p> <ul> <li>A mandatory name and slug</li> <li>An optional description</li> </ul> <p></p>"},{"location":"quick-start/#applications","title":"Applications","text":"<p>Go to the Applications list under the Applications section.</p> <p>You can now create our two Applications. An application is a logical container for our data flows, which identify their purpose: we have that data flow in our network because of that application.</p> <p>Applications can have:</p> <ul> <li>A mandatory name</li> <li>An optional application role</li> <li>Optional description and comments</li> <li>Optional contacts in the Contacts tab.</li> </ul> Name Application role Acme Inc. website Business applications Zabbix Support applications <p></p> <p>Once created, you will be able to see all the data flows related to an application in its detail page.</p> <p></p>"},{"location":"quick-start/#data-flow-groups","title":"Data Flow Groups","text":"<p>Application are used to describe the reason why a data flow exists, however it is often useful to regroup the data flows according to other criteria (e.g.: they are the same flow, but for different applications).</p> <p>Data Flow Groups are made to be just that: arbitrary groups. They can form a hierarchy of groups (similar to the hierarchy of sites in NetBox) and they can also be associated to an application. However, a data flow can only belong to one direct group (and indirectly to all the ancestors of that group).</p> <p>A group can contain data flows associated with several applications.</p> <p>Depending on your needs, you can have:</p> <ul> <li>A group containing all the data flows in a DMZ, regardless of their applications</li> <li>A group containing all the data flows related to the backend of a specific application</li> <li>The same group contained in a more generic group containing all the data flows of that application</li> <li>...</li> </ul> <p>In our example, we will create the following hierarchy of groups:</p> <ul> <li>Acme Inc. data flows: all the data flows of that application</li> <li>Acme Inc. external access: data flows related to user access to the frontend</li> <li>Acme Inc. backend access: data flows related to user access to the backend</li> <li>Acme Inc. inter-server communications</li> <li>Infrastructure management data flows</li> <li>Zabbix application monitoring</li> <li>Zabbix infrastructure monitoring</li> <li>Zabbix network discovery</li> </ul> <p>Data Flow Groups can have:</p> <ul> <li>A mandatory name and slug</li> <li>A mandatory status</li> <li>An optional application</li> <li>An optional parent group (to form the hierarchy)</li> <li>Optional description and comments</li> </ul> <p>Tip</p> <p>If a data flow group is disabled, all its child groups and all the data flows they contain are also considered disabled. This allow to quickly switch on or off data flows based on the groups.</p> <p></p> <p>Note</p> <p>In this example, we have disabled the group \"Acme Inc. external access\".</p> <p>The detail page of a group will list:</p> <ul> <li>Its child groups</li> <li>The data flows it directly contains</li> <li>The data flows all its children contain</li> </ul> <p></p>"},{"location":"quick-start/#object-aliases_1","title":"Object Aliases","text":"<p>Now, we can create the other Object Aliases that we need, such as the network ranges containing the endpoints of our business users, the Zabbix servers and the prefixes where we have the servers to be monitored.</p> <p></p> <p>Tip</p> <p>Do you need to enforce a naming convention for your object aliases, data flows or groups? Check the Nomenclature section in this page for details.</p>"},{"location":"quick-start/#data-flows_1","title":"Data flows","text":"<p>Let's create the remaining data flows.</p> <p></p> <p>Note</p> <p>Because we have disabled the group \"Acme Inc. external access\", the data flow it contains is marked as Disabled (Inherited). The data flow \"Internal access to Acme backend API\" also appears Disabled: its groups are all enabled, but the data flow was disabled directy.</p> <p>The \"Targets\" tab in the data flow's detailed view can be used to resolve the object aliases and display the list of all IP address, ranges and prefixes in this data flow.</p> <p></p>"},{"location":"quick-start/#tab-views","title":"Tab views","text":"<p>The plugin adds tab views in the native objects that are the source or the destination of a data flow.</p> <p>In the example below, the device is part of one object alias and in the destination of our data flows related to Zabbix.</p> <p></p> <p>And this VM is one of the frontend servers:</p> <p></p> <p>This tab is automatically displayed when an object is member of at least one object alias. It is displayed for:</p> <ul> <li>IP Addresses</li> <li>IP Ranges</li> <li>Prefixes</li> <li>Devices with at least one IP Address assigned to one interface</li> <li>Virtual machines with at least one IP Address assigned to one interface</li> </ul> <p>Warning</p> <p>The tab lists all the object aliases and dataflows where the object is explicitly listed. It does not detect when a prefix or range would implicitly include an IP address, a smaller range or a child prefix.</p>"},{"location":"quick-start/#application-related-objects","title":"Application-related Objects","text":"<p>If you want, you can use a custom field to document which application other assets belong to. First, create a custom field (in the Customization section of NetBox) and link it to any object types you want (devices and virtual machines in this example).</p> <p>The custom field must have the following settings:</p> <ul> <li>Name: any internal name you want (lowercase letters and underscores only), you will use it to configure the plugin in the next step.</li> <li>Label: the field name that will be displayed when editing a device or virtual machine.</li> <li>Type: it must be <code>Object</code> (if assets can belong to at most one application) or <code>Multiple objects</code> (if you allow an asset to have multiple applications).</li> <li>Related object type: select <code>Data Flows &gt; Application</code>.</li> </ul> <p></p> <p>Then, edit NetBox's <code>configuration.py</code> and add a <code>PLUGIN_CONFIG</code>:</p> <p><pre><code># Add in: /opt/netbox/netbox/netbox/configuration.py\n\nPLUGINS_CONFIG = {\n    'netbox_data_flows': {\n        # Use a Custom Field to identify objects linked to an application\n        'application_custom_field': \"application\",\n    }\n}\n</code></pre> After restarting NetBox, you can now link assets to your applications. In the application page, you will see the number of related objects, and clicking on each line will list the objects:</p> <p></p>"},{"location":"security/","title":"Security policy","text":""},{"location":"security/#security-policy","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Only the latest released version of the plugin is supported and will receive security patches.</p> Version Supported 1.2.x 1.1.x 1.0.x 0.9.x &lt; 0.9"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Use the GitHub security advisories to report a vulnerability. Please do not create a public issue.</p> <p>Confirmed vulnerabilities will be fixed when possible and the reporter will be credited, unless they wish to remain anonymous. There is no bug bounty associated with this plugin.</p>"}]}